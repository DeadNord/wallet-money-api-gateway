# Define the user and group under which the Nginx worker processes will run.
user nginx;

# Automatically determine the number of Nginx worker processes.
worker_processes auto;

# Define paths for the PID file and additional modules.
pid /run/nginx.pid;
include /usr/lib/nginx/modules/*.conf;

# Event module settings for managing connections.
events {
    worker_connections 1024; # Set the maximum number of connections per worker.
}

# HTTP server configuration.
http {
    # Set up DNS resolution for internal services with a 30-second cache validity.
    resolver [fdaa::3]:53 valid=30s;

    # Logging settings.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /logs/access.log main;
    error_log /logs/error.log warn;

    # Protect against traffic spikes with rate limiting.
    limit_req_zone $binary_remote_addr zone=api:10m rate=5r/s;

    # Proxy settings for performance optimization.
    proxy_buffering off;
    proxy_buffer_size 16k;
    proxy_busy_buffers_size 24k;
    proxy_buffers 32 16k;

    # Ensure request headers are forwarded through proxies.
    proxy_pass_request_headers on;

    # Define the server.
    server {
        listen 80; # Listen on port 80 for IPv4 and IPv6 requests.
        server_name wallet-money-api-gateway.fly.dev; # Set the server name.

        # General proxy settings for all routes, applying rate limiting.
        location / {
            limit_req zone=api burst=10;
        }

        # Configuration for serving Swagger and ReDoc documentation.
        # Direct pass to the finances service for specific paths.
        location /static/ {
            set $finances_service "http://wallet-money-finances-service.internal";
            proxy_pass $finances_service;
        }

        location /api/finances/swagger/ {
            set $finances_service "http://wallet-money-finances-service.internal";
            proxy_pass $finances_service;
        }

        location /api/finances/redoc/ {
            set $finances_service "http://wallet-money-finances-service.internal";
            proxy_pass $finances_service;
        }

        # Direct pass for categories endpoint, applying CORS settings specifically for this route.
        location /api/finances/categories/ {
            # Repeat CORS settings for OPTIONS preflight requests if necessary.
            set $finances_service "http://wallet-money-finances-service.internal";
            proxy_pass $finances_service;
        }

        # Internal route for authentication checks.
        location = /access {
            internal;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_pass "http://wallet-money-auth-service.internal/api/auth/access";
        }

        # Proxy for the finances service, with user ID extraction from authentication response.
        location /api/finances/ {
            # Handle CORS for OPTIONS preflight requests.
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'DELETE, GET, OPTIONS, PATCH, POST, PUT';
                add_header 'Vary' 'Origin';
                add_header 'Access-Control-Allow-Headers' 'authorization, reqheader, accept, accept-encoding, authorization, content-type, dnt, origin, user-agent, x-csrftoken, x-requested-with';
                add_header 'Access-Control-Max-Age' 86400;
                add_header 'Content-Type' 'text/html; charset=utf-8';
                return 200;
            }
            set $finances_service "http://wallet-money-finances-service.internal";
            auth_request /access;
            auth_request_set $user_id $upstream_http_user_id;
            proxy_set_header User-Id $user_id;
            proxy_pass $finances_service;
        }

        # Proxy for the authentication service.
        location /api/auth/ {
            set $auth_service "http://wallet-money-auth-service.internal";
            proxy_pass $auth_service;
        }

        # Support for Let's Encrypt ACME challenges.
        location ~ /.well-known/acme-challenge {
            allow all;
            root /var/www/letsencrypt;
            try_files $uri =404;
        }
    }

    include /etc/nginx/conf.d/*.conf; # Include other configuration files.
}